%pylab inline --no-import-all
import numpy as np
import cv2
import matplotlib.cm as cm

def get_frames(file_name):
    cap = cv2.VideoCapture(file_name)
    frames = []

    if not cap.isOpened():
       raise IOError('cv2 could not read from video capture file: '
                     + file_name)

    ret = True
    while ret:
        ret, frame = cap.read()
        if frame is not None:
            frames.append(frame)

        # ret will change to False at the end of file
        # frame has a BGR colored image

    cap.release()
    return np.array(frames)

def show(frame):
    if len(frame.shape) > 2:
        plt.imshow(frame[:, :, [2, 1, 0]], interpolation='none',
                   extent=[0, frame.shape[1], 0, frame.shape[0]])
        plt.show()
    else:
        plt.imshow(frame, cmap=cm.Greys_r, interpolation='none',
                   extent=[0, frame.shape[1], 0, frame.shape[0]],

                   vmin=0, vmax=255)
        plt.show()

def play(frames):
    for frame in frames:
    	cv2.imshow('Watch me', frame)
    	k = cv2.waitKey(60) & 0xff
        if k == 27:
           break

def to_gray(frames):
    gray = np.ndarray(frames.shape[0:3])
    for t in range(len(frames)):
        gray[t] = cv2.cvtColor(frames[t], cv2.COLOR_BGR2GRAY)
    return gray

def cvtColorFrames(frames, color):
    new = np.ndarray(frames.shape)
    for t in range(len(frames)):
        new[t] = cv2.cvtColor(frames[t], color)
    return new

def get_background(frames):
    return np.array(np.median(frames, axis=0), dtype=np.uint8)

def add(a, b):
    return np.array(np.clip(np.array(a, dtype=np.int) + b, 0, 255), dtype=np.uint8)

def mask(frame, bg, num=.2):
    new_frame = frame.copy()
    bg_gray = cv2.cvtColor(bg, cv2.COLOR_BGR2GRAY)
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    min = add(bg_gray, -num)
    max = add(bg_gray, num)
    new_frame[(min <= frame_gray) * (frame_gray <= max)] = 255
    return new_frame

def get_changed(frame, bg):
    bg_gray = cv2.cvtColor(bg, cv2.COLOR_BGR2GRAY)
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    new = np.average(np.abs(frame_gray - bg_gray), axis=2)
    return new

def get_contours(remainder):
    remainder_gray = cv2.cvtColor(r, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(remainder_gray, 0, 255)
    contours, hierarchy = cv2.findContours(e, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    drawing = np.zeros(rg.shape, np.uint8)
    for cnt in contours:
        color = np.random.randint(0, 255, (3)).tolist()  # Select a random color
        cv2.drawContours(drawing, [cnt], 0, color, 2)
    return drawing, contours, hierarchy

def main():
    global frames
    frames = get_frames('shots/1.ogg')
    gray_frames = to_gray(frames)
    bg = get_background(gray_frames)
    print ('Loaded {} frames'.format(gray_frames.shape[0]))

    print ('Type a frame number and press enter. -1 to quit')
    f = 1
    while f != -1:
        f = int(input())
        show(gray_frames[f])
        show(gray_frames[f] - bg)

if __name__ == '__main__':
    pass
    #main()
